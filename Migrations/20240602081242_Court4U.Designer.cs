// <auto-generated />
using System;
using Court4U_PRN.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Court4U_PRN.Migrations
{
    [DbContext(typeof(Court4UDbContext))]
    [Migration("20240602081242_Court4U")]
    partial class Court4U
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Court4U_PRN.Data.Entity.Bill", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Bill");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.BookedSlot", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("CheckedIn")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("SlotId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SlotId");

                    b.ToTable("BookedSlot");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.Booking", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.Cancellation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CancellerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CancellerId");

                    b.ToTable("Cancellation");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.Club", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityOfProvince")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.ClubImage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClubId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClubImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("ClubImage");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.ClubRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClubId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PermissionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("PermissionId");

                    b.ToTable("ClubRole");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.Court", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClubId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Num")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("Court");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.MemberSubscription", b =>
                {
                    b.Property<string>("MemberId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubscriptionOptionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MemberId");

                    b.HasIndex("SubscriptionOptionId");

                    b.ToTable("MemberSubscription");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.Permission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.Pricing", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClubId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("Pricings");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.Review", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClubId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentLeft")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentRight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("ReviewerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.Slot", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClubId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfWeek")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("Slot");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.StaffProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClubId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("StaffProfile");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.StaffRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClubRoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClubRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("StaffRole");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.SubOptionSlot", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SlotId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubscriptionOptionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SlotId");

                    b.HasIndex("SubscriptionOptionId");

                    b.ToTable("SubOptionSlot");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.SubscriptionOption", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClubId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<float>("price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("SubscriptionOption");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.UserRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MemberSubscriptionMemberId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MemberSubscriptionMemberId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.BookedSlot", b =>
                {
                    b.HasOne("Court4U_PRN.Data.Entity.Slot", "Slot")
                        .WithMany("BookedSlots")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.Booking", b =>
                {
                    b.HasOne("Court4U_PRN.Data.Entity.Bill", "Bill")
                        .WithOne("Booking")
                        .HasForeignKey("Court4U_PRN.Data.Entity.Booking", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Court4U_PRN.Data.Entity.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.Cancellation", b =>
                {
                    b.HasOne("Court4U_PRN.Data.Entity.User", "Canceller")
                        .WithMany("Cancellations")
                        .HasForeignKey("CancellerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Court4U_PRN.Data.Entity.BookedSlot", "BookedSlot")
                        .WithOne("Cancellation")
                        .HasForeignKey("Court4U_PRN.Data.Entity.Cancellation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookedSlot");

                    b.Navigation("Canceller");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.Club", b =>
                {
                    b.HasOne("Court4U_PRN.Data.Entity.User", "User")
                        .WithMany("Clubs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.ClubImage", b =>
                {
                    b.HasOne("Court4U_PRN.Data.Entity.Club", "Club")
                        .WithMany("ClubImages")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.ClubRole", b =>
                {
                    b.HasOne("Court4U_PRN.Data.Entity.Club", "Club")
                        .WithMany("ClubRoles")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Court4U_PRN.Data.Entity.Permission", "Permission")
                        .WithMany("ClubRoles")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.Court", b =>
                {
                    b.HasOne("Court4U_PRN.Data.Entity.Club", "Club")
                        .WithMany("Courts")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.MemberSubscription", b =>
                {
                    b.HasOne("Court4U_PRN.Data.Entity.Bill", "Bill")
                        .WithOne("MemberSubscription")
                        .HasForeignKey("Court4U_PRN.Data.Entity.MemberSubscription", "MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Court4U_PRN.Data.Entity.User", "Member")
                        .WithMany("MemberSubscriptions")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Court4U_PRN.Data.Entity.SubscriptionOption", "SubscriptionOption")
                        .WithMany("MemberSubscriptions")
                        .HasForeignKey("SubscriptionOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Member");

                    b.Navigation("SubscriptionOption");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.Pricing", b =>
                {
                    b.HasOne("Court4U_PRN.Data.Entity.Club", "Club")
                        .WithMany("Pricings")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.Review", b =>
                {
                    b.HasOne("Court4U_PRN.Data.Entity.Club", "Club")
                        .WithMany("Reviews")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Court4U_PRN.Data.Entity.User", "Reviewer")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.Slot", b =>
                {
                    b.HasOne("Court4U_PRN.Data.Entity.Club", "Club")
                        .WithMany("Slots")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.StaffProfile", b =>
                {
                    b.HasOne("Court4U_PRN.Data.Entity.Club", "Club")
                        .WithMany("StaffProfiles")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Court4U_PRN.Data.Entity.User", "User")
                        .WithOne("StaffProfile")
                        .HasForeignKey("Court4U_PRN.Data.Entity.StaffProfile", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.StaffRole", b =>
                {
                    b.HasOne("Court4U_PRN.Data.Entity.ClubRole", "ClubRole")
                        .WithMany("StaffRoles")
                        .HasForeignKey("ClubRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Court4U_PRN.Data.Entity.User", "User")
                        .WithMany("StaffRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ClubRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.SubOptionSlot", b =>
                {
                    b.HasOne("Court4U_PRN.Data.Entity.Slot", "Slot")
                        .WithMany("SubOptionSlots")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Court4U_PRN.Data.Entity.SubscriptionOption", "SubscriptionOption")
                        .WithMany("SubOptionSlots")
                        .HasForeignKey("SubscriptionOptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Slot");

                    b.Navigation("SubscriptionOption");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.SubscriptionOption", b =>
                {
                    b.HasOne("Court4U_PRN.Data.Entity.Club", "Club")
                        .WithMany("SubscriptionOptions")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.UserRole", b =>
                {
                    b.HasOne("Court4U_PRN.Data.Entity.MemberSubscription", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("MemberSubscriptionMemberId");

                    b.HasOne("Court4U_PRN.Data.Entity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Court4U_PRN.Data.Entity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.Bill", b =>
                {
                    b.Navigation("Booking")
                        .IsRequired();

                    b.Navigation("MemberSubscription")
                        .IsRequired();
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.BookedSlot", b =>
                {
                    b.Navigation("Cancellation")
                        .IsRequired();
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.Club", b =>
                {
                    b.Navigation("ClubImages");

                    b.Navigation("ClubRoles");

                    b.Navigation("Courts");

                    b.Navigation("Pricings");

                    b.Navigation("Reviews");

                    b.Navigation("Slots");

                    b.Navigation("StaffProfiles");

                    b.Navigation("SubscriptionOptions");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.ClubRole", b =>
                {
                    b.Navigation("StaffRoles");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.MemberSubscription", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.Permission", b =>
                {
                    b.Navigation("ClubRoles");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.Slot", b =>
                {
                    b.Navigation("BookedSlots");

                    b.Navigation("SubOptionSlots");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.SubscriptionOption", b =>
                {
                    b.Navigation("MemberSubscriptions");

                    b.Navigation("SubOptionSlots");
                });

            modelBuilder.Entity("Court4U_PRN.Data.Entity.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Cancellations");

                    b.Navigation("Clubs");

                    b.Navigation("MemberSubscriptions");

                    b.Navigation("Reviews");

                    b.Navigation("StaffProfile")
                        .IsRequired();

                    b.Navigation("StaffRoles");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
